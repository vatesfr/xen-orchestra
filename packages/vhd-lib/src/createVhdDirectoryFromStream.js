import { parseVhdStream, VhdDirectory } from './'
import { Disposable } from 'promise-toolbox'
import { asyncEach } from '@vates/async-each'

const buildVhd = Disposable.wrap(async function* (handler, path, inputStream, { concurrency }) {
  const vhd = yield VhdDirectory.create(handler, path)
  await asyncEach(
    parseVhdStream(inputStream),
    async function (item) {
      switch (item.type) {
        case 'footer':
          vhd.footer = item.footer
          break
        case 'header':
          vhd.header = item.header
          break
        case 'parentLocator':
          await vhd.writeParentLocator({ ...item, data: item.buffer })
          break
        case 'block':
          await vhd.writeEntireBlock(item)
          break
        case 'bat':
          // it exists but  I don't care
          break
        default:
          throw new Error(`unhandled type of block generated by parser : ${item.type} while generating ${path}`)
      }
    },
    {
      concurrency,
    }
  )
  await Promise.all([vhd.writeFooter(), vhd.writeHeader(), vhd.writeBlockAllocationTable()])
})

export async function createVhdDirectoryFromStream(handler, path, inputStream, { validator, concurrency = 16 } = {}) {
  try {
    await buildVhd(handler, path, inputStream, { concurrency })
    if (validator !== undefined) {
      await validator.call(this, path)
    }
  } catch (error) {
    // cleanup on error
    await handler.rmtree(path)
    throw error
  }
}
