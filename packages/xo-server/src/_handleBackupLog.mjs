import humanFormat from 'human-format'
import ms from 'ms'
import { createLogger } from '@xen-orchestra/log'

const { warn } = createLogger('xo:server:handleBackupLog')

async function sendToNagios(app, jobName, vmBackupInfo) {
  if (app.sendPassiveCheck === undefined) {
    // Nagios plugin is not loaded
    return
  }

  try {
    const messageToNagios = {
      id: vmBackupInfo.id,
      result: vmBackupInfo.result,
      size: humanFormat.bytes(vmBackupInfo.size),
      duration: ms(vmBackupInfo.end - vmBackupInfo.start),
    }

    await app.sendPassiveCheck(
      {
        message: JSON.stringify(messageToNagios),
        status: 0,
      },
      app.getObject(messageToNagios.id).name_label,
      jobName
    )
  } catch (error) {
    warn('sendToNagios:', { error })
  }
}

export function forwardResult(log) {
  if (log.status === 'failure') {
    throw log.result
  }
  return log.result
}

// it records logs generated by backup task logs
export const handleBackupLog = (taskLog, event, { app, jobName, store }) => {
  // sending data to Nagios
  if (app !== undefined && jobName !== undefined) {
    if (event.type === 'end' && taskLog.properties?.type === 'VM') {
      // we arbitrary pick one transfer to get the size
      const exportTask = taskLog.tasks.find(task => task.properties?.name === 'export')
      const transferTask =
        exportTask === undefined ? undefined : exportTask.tasks.find(task => task.properties?.name === 'transfer')
      const vmBackupInfo = {
        start: taskLog.start,
        id: taskLog.properties?.id,
        result: taskLog.status,
        end: taskLog.end,
        size: transferTask?.result?.size,
      }
      sendToNagios(app, jobName, vmBackupInfo)
    }
  }

  store.put(taskLog.$root.id, taskLog.$root)

  // end of the root task: return/throw the result
  if (event.type === 'end' && taskLog.$root === taskLog) {
    return forwardResult(taskLog)
  }
}
